#!/bin/sh -efu
#
# Copyright (C) 2014  Paul Wolneykien <manowar@altlinux.org>
# Copyright (C) 2014  STC Metrotek [http://metrotek.spb.ru/]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PROG="${PROG:-${0##*/}}"
PROG_PATH="${0%/*}"

. "$PROG_PATH/pocket-functions.sh"

show_help() {
    cat <<EOF
Usage: $PROG [options] POCKETNAME [DIR]

$PROG initializes the current directory (or the directory DIR if specified)
as a pocket POCKETNAME writing the corresponding $POCKETFILE. Updates the
$POCKETFILE if it already exists.
EOF

cat <<EOF

  -c CONFFILE, --config=CONFFILE  use configuration file CONFFILE;
  -f TYPE, --flavour=TYPE  explicitly select the pocket flavour TYPE;

  -F, --list-flavours  list the available pocket flavours and exit.

EOF
    exit 0
}

OPTS=`getopt -n $PROG -o q,v,V,h,c:,f:,F -l quiet,verbose,version,help,config:,flavour:,list-flavours -- "$@"` || ( ret=$?; show_usage; exit $ret ) >&2
eval set -- "$OPTS"

quiet=; verbose=; config=
while :; do
    case "$1" in
    -q|--quiet) quiet=-q;;
    -v|--verbose) verbose=-v;;
    -V|--version) print_version; exit 0;;
    -c|--config) shift; config="$1";;
    -f|--flavour) shift; config="$1";;
    -F|list-flavours) do_print_flavours;;
    --) shift; break;;
    *)
        fatal 'Unrecognized option: %s\n' "$1"
        ;;
    esac
    shift
done

if [ $# -lt 1 ]; then
    show_usage
    exit 1
fi

POCKETNAME="$1"; shift

if [ $# -gt 0 ]; then
    DIR="$1"; shift
else
    DIR='.'
fi


## Functions

# Lists the available flavours and exit
do_print_flavours()
{
    load_config ${config:+"$config"}
    print_flavours
    exit 0
}


## Main

config="$(load_config ${config:+"$config"})"

workdir="$(make_workdir)"
trap "cleanup_workdir" EXIT

[ -n "$flavour" ] || flavour="$(guess_flavour)"
if [ -z "$flavour" ]; then 
    write_error 'Unable to guess the flavour. '
    fatal 'Try to select one explicitly\n'
fi

pocketfile="${DIR%/}/$POCKETFILE";

# Lookup the template
template="$(find_config "$flavour.pocket")"
[ -n "$template" ] || fatal 'Template for the flavour "%s" not found\n' \
                            "$flavour"

cat "$template" >"${workdir%/}/$POCKETFILE"

